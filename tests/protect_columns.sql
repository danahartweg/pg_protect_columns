begin;

select
	plan(4);

create table test_table(
	id bigint primary key generated by default as identity,
	mutable_column text,
	immutable_column_1 text,
	immutable_column_2 text
);

create trigger _protect_columns_before_update
	before update on test_table for each row
	execute procedure protect_columns('immutable_column_1', 'immutable_column_2');

insert into test_table(
	id,
	mutable_column,
	immutable_column_1,
	immutable_column_2)
values (
	1,
	'mutable',
	'immutable 1',
	'immutable 2');

select
	results_eq($$ update
			test_table
		set
			mutable_column = 'new value'
			where
				id = 1
			returning
				mutable_column $$, $$
			values ('new value') $$, 'A mutable column can be updated.');

select
	throws_ok($$ update
			test_table
		set
			immutable_column_1 = 'changed the value'
			where
				id = 1 $$, 'Modifying "immutable_column_1" is not allowed', 'The first immutable column cannot be updated.');

select
	throws_ok($$ update
			test_table
		set
			immutable_column_2 = 'changed the value'
			where
				id = 1 $$, 'Modifying "immutable_column_2" is not allowed', 'The first immutable column cannot be updated.');

select
	throws_ok($$ update
			test_table
		set
			immutable_column_1 = 'changed the value', immutable_column_2 = 'changed the value'
			where
				id = 1 $$, 'Modifying "immutable_column_1" is not allowed', 'Only one immutable column violation will be thrown.');

select
	finish();

rollback;
